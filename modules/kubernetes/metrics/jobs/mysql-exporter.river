/*
Module: job-mysql
Description: Scrapes mysql

Note: Every argument except for "forward_to" is optional, and does have a defined default value.  However, the values for these
      arguments are not defined using the default = " ... " argument syntax, but rather using the coalesce(argument.value, " ... ").
      This is because if the argument passed in from another consuming module is set to null, the default = " ... " syntax will
      does not override the value passed in, where coalesce() will return the first non-null value.
*/
argument "forward_to" {
  comment = "Must be a list(MetricsReceiver) where collected logs should be forwarded to"
}

argument "enabled" {
  comment = "Whether or not the mysql-job should be enabled, this is useful for disabling the job when it is being consumed by other modules in a multi-tenancy environment (default: true)"
  optional = true
}

argument "namespaces" {
  comment = "The namespaces to look for targets in (default: [] is all namespaces)"
  optional = true
}

argument "selectors" {
  // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  comment = "The label selectors to use to find matching targets (default: [\"app.kubernetes.io/name=prometheus-mysql-exporter\"])"
  optional = true
}

argument "port_name" {
  comment = "The of the port to scrape metrics from (default: metrics)"
  optional = true
}

argument "job_label" {
  comment = "The job label to add for all mysql-metrics (default: integrations/mysql)"
  optional = true
}

argument "keep_metrics" {
  comment = "A regex of metrics to keep (default: see below)"
  optional = true
}

argument "scrape_interval" {
  comment = "How often to scrape metrics from the targets (default: 60s)"
  optional = true
}

argument "scrape_timeout" {
  comment = "How long before a scrape times out (default: 10s)"
  optional = true
}

argument "max_cache_size" {
  comment = "The maximum number of elements to hold in the relabeling cache (default: 100000).  This should be at least 2x-5x your largest scrape target or samples appended rate."
  optional = true
}

argument "clustering" {
  // Docs: https://grafana.com/docs/agent/latest/flow/concepts/clustering/
  comment = "Whether or not clustering should be enabled (default: false)"
  optional = true
}

// mysql service discovery for all of the pods in the mysql daemonset
discovery.kubernetes "mysql" {
  role = "pod"

  selectors {
    role = "pod"
    label = join(coalesce(argument.selectors.value, ["app.kubernetes.io/name=prometheus-mysql-exporter"]), ",")
  }

  namespaces {
    names = coalesce(argument.namespaces.value, [])
  }
}

// mysql relabelings (pre-scrape)
discovery.relabel "mysql" {
  targets = discovery.kubernetes.mysql.targets

  // drop all targets if enabled is false
  rule {
    target_label = "__enabled"
    replacement = format("%s", coalesce(argument.enabled.value, "true"))
  }
  rule {
    source_labels = ["__enabled"]
    regex = "false"
    action = "drop"
  }

  // keep only the specified metrics port name, and pods that are Running and ready
  rule {
    source_labels = [
      "__meta_kubernetes_pod_container_port_name",
      "__meta_kubernetes_pod_phase",
      "__meta_kubernetes_pod_ready",
    ]
    separator = "@"
    regex = coalesce(argument.port_name.value, "http-metrics") + "@Running@true"
    action = "keep"
  }

  // set the namespace label
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    target_label  = "namespace"
  }

  // set the pod label
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label  = "pod"
  }

  // set the container label
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    target_label  = "container"
  }

  // set a controller label
  rule {
    source_labels = [
      "__meta_kubernetes_pod_controller_kind",
      "__meta_kubernetes_pod_controller_name",
    ]
    separator = "/"
    target_label  = "controller"
  }

  // set the app name if specified as metadata labels "app:" or "app.kubernetes.io/name:" or "k8s-app:"
  rule {
    action = "replace"
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_name",
      "__meta_kubernetes_pod_label_k8s_app",
      "__meta_kubernetes_pod_label_app",
    ]
    regex = "^(?:;*)?([^;]+).*$"
    replacement = "$1"
    target_label = "app"
  }

  // set the component if specified as metadata labels "component:" or "app.kubernetes.io/component:" or "k8s-component:"
  rule {
    action = "replace"
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_component",
      "__meta_kubernetes_pod_label_k8s_component",
      "__meta_kubernetes_pod_label_component",
    ]
    regex = "^(?:;*)?([^;]+).*$"
    replacement = "$1"
    target_label = "app"
  }
}

// mysql scrape job
prometheus.scrape "mysql" {
  job_name = coalesce(argument.job_label.value, "integrations/mysql")
  forward_to = [prometheus.relabel.mysql.receiver]
  targets = discovery.relabel.mysql.output
  scrape_interval = coalesce(argument.scrape_interval.value, "60s")
  scrape_timeout = coalesce(argument.scrape_timeout.value, "10s")

  clustering {
    enabled = coalesce(argument.clustering.value, false)
  }
}

// mysql-metric relabelings (post-scrape)
prometheus.relabel "mysql" {
  forward_to = argument.forward_to.value
  max_cache_size = coalesce(argument.max_cache_size.value, 100000)

  // keep only metrics that match the keep_metrics regex
  rule {
    source_labels = ["__name__"]
    regex = coalesce(argument.keep_metrics.value, "mysql_(global_status_(aborted_(clients|connects)|buffer_pool_pages|bytes_(received|sent)|commands_total|created_tmp_(disk_tables|files|tables)|handlers_total|innodb_(log_waits|mem_(adaptive_hash|dictionary)|num_open_files|page_size)|max_used_connections|open_(files|table_definitions|tables)|opened_(files|table_definitions|tables)|qcache_(free_memory|hits|inserts|lowmem_prunes|not_cached|queries_in_cache)|queries|questions|select_(full_(join|range_join)|range(|_check)|scan)|slow_queries|sort_(merge_passes|range|rows|scan)|table_locks_(immediate|waited)|table_open_cache_(hits|misses|overflows)|threads_(cached|connected|created|running)|uptime|wsrep_(local_(recv_queue|state)|ready))|global_variables_(innodb_(additional_mem_pool_size|buffer_pool_size|log_buffer_size)|key_buffer_size|max_connections|open_files_limit|query_cache_size|table_(definition_cache|open_cache)|thread_cache_size|tokudb_cache_size|wsrep_desync)|heartbeat_(now|stored)_timestamp_seconds|info_schema_processlist_threads|slave_status_(seconds_behind_master|slave_(io|sql)_running|sql_delay)|up)")
    action = "keep"
  }
}
